// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Example {
  id String @id @default(cuid())
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String? @db.Text
  oauth_token              String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  workWeeks     WorkWeek[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FlexHours {
  id    Int @id @default(autoincrement())
  hours Int @default(0)
}

model WorkDay {
  id        Int      @id @default(autoincrement())
  complete  Boolean?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  WorkWeek   WorkWeek? @relation(fields: [workWeekId], references: [id])
  workWeekId Int?
}

model WorkWeek {
  id Int @id @default(autoincrement())

  hoursWorked Int       @default(0)
  totalHours  Int       @default(40)
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime  @default(now())
  WorkDay     WorkDay[]
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?
}
