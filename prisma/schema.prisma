generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "postgresql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String? @db.Text
  oauth_token              String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  totalHours    Int        @default(0)
  accounts      Account[]
  sessions      Session[]
  workWeeks     WorkWeek[]
  FlexHours     FlexHours?
  Timer         Timer?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model FlexHours {
  id     Int    @id @default(autoincrement())
  hours  Float  @default(0)
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model WorkDayTimeEntry {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startTime   DateTime
  endTime     DateTime?
  WorkDay     WorkDay   @relation(fields: [workDayId], references: [id])
  workDayId   Int
  description String?
}

model WorkDay {
  id               Int                @id @default(autoincrement())
  complete         Boolean?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  day              Int
  WorkWeek         WorkWeek?          @relation(fields: [workWeekId], references: [id])
  workWeekId       Int
  WorkDayTimeEntry WorkDayTimeEntry[]

  @@unique([workWeekId, day])
}

model WorkWeek {
  id Int @id @default(autoincrement())

  weekNumber  Int
  hoursWorked Int       @default(0)
  totalHours  Int       @default(40)
  startDate   DateTime
  endDate     DateTime
  WorkDay     WorkDay[]
  User        User?     @relation(fields: [userId], references: [id])
  userId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([weekNumber, userId])
}

model Timer {
  id        Int       @id @default(autoincrement())
  startTime DateTime?
  on        Boolean?  @default(true)
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @unique
}
